{"ast":null,"code":"var _jsxFileName = \"/Users/ashrafkhan/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = '27e5a678ded9406f9eac4d869726a110'; // Replace with your Client ID\nconst clientSecret = 'd1a8e945d82c44df84ad6faa7a7f713b'; // Replace with your Client Secret\nconst redirectUri = \"http://localhost:3000/callback\"; // Replace with your redirect URI\nconst scopes = \"user-read-private user-read-email user-library-read\";\nconst SpotifySongSearch = () => {\n  _s();\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [refreshToken, setRefreshToken] = useState('');\n  const [query, setQuery] = useState(\"taylor swift\");\n  const [songs, setSongs] = useState([]);\n  const [expirationTime, setExpirationTime] = useState(0);\n  /* useEffect( ()=> {\n     const fetchAccessToken = async () => {\n       var url = 'https://accounts.spotify.com/api/token';\n       var options = {\n         method: 'POST',\n         headers: {\n           \"Content-Type\" : \"application/x-www-form-urlencoded\",\n         }, \n         body: `grant_type=client_credentials&client_id=${clientId}&client_secret=${clientSecret}`\n       }\n       \n       try {\n         const result = await fetch(url, options);\n         const data = await result.json();\n         setAccessToken(data.access_token);\n       } catch (error) {\n         console.error('Error fetching access token:', error);\n       }\n        \n     }\n    \n       \n      fetchAccessToken();\n   },[]);*/\n\n  const handleLogin = () => {\n    const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n    window.location.href = authUrl;\n  };\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get(\"code\");\n    if (code) {\n      fetchAccessToken(code);\n    }\n  }, []);\n  const fetchAccessToken = async code => {\n    const url = \"https://accounts.spotify.com/api/token\";\n    const bodyParams = new URLSearchParams({\n      grant_type: \"authorization_code\",\n      code: code,\n      // Authorization code from URL\n      redirect_uri: redirectUri,\n      client_id: clientId,\n      client_secret: clientSecret\n    });\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: bodyParams.toString()\n    };\n    try {\n      const response = await fetch(url, options);\n      if (!response.ok) {\n        const errorDetails = await response.text();\n        console.error(`Failed to fetch access token: ${response.status}`, errorDetails);\n        return;\n      }\n      const data = await response.json();\n      console.log(\"Token response data:\", data);\n      setAccessToken(data.access_token);\n      setRefreshToken(data.refresh_token);\n      setExpirationTime(Date.now() + data.expires_in * 1000);\n      scheduleTokenRefresh(data.expires_in - 60);\n    } catch (error) {\n      console.error(\"Error fetching access token:\", error);\n    }\n  };\n  const refreshAccessToken = async () => {\n    try {\n      const url = \"https://accounts.spotify.com/api/token\";\n      const payload = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken,\n          client_id: clientId\n        })\n      };\n      const response = await fetch(url, payload);\n      const data = await response.json();\n      setAccessToken(data.access_token);\n      setExpirationTime(Date.now() + data.expires_in * 1000);\n      scheduleTokenRefresh(data.expires_in - 60);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const scheduleTokenRefresh = delayInSeconds => {\n    setTimeout(() => {\n      refreshAccessToken();\n    }, delayInSeconds * 1000);\n  };\n  async function SearchSong() {\n    const url = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=10`;\n    const authorizationSearch = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        // Fixed incorrect 'applications/json' to 'application/json'\n        \"Authorization\": `Bearer ${accessToken}` // Added a space after 'Bearer' and used template literals for clarity\n      }\n    };\n    try {\n      const res = await fetch(url, authorizationSearch);\n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n      const data = await res.json(); // Awaited the response JSON parsing\n      setSongs(data.tracks.items);\n    } catch (error) {\n      console.error('Error fetching song:', error);\n    }\n  }\n  console.log(\"Access Token:\", accessToken);\n  console.log(\"Refresh Token:\", refreshToken);\n  console.log(\"Token Expiration:\", new Date(expirationTime).toISOString());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login to Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spotify Song Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      placeholder: \"Search for a song\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: SearchSong,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: songs.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: song.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Artist: \", song.artists.map(artist => artist.name).join(\", \")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: song.external_urls.spotify,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Listen on Spotify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, song.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(SpotifySongSearch, \"6z/3WZ6mQMZD7rJNBhxGxtS26TU=\");\n_c = SpotifySongSearch;\nexport default SpotifySongSearch;\nvar _c;\n$RefreshReg$(_c, \"SpotifySongSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","clientId","clientSecret","redirectUri","scopes","SpotifySongSearch","_s","accessToken","setAccessToken","refreshToken","setRefreshToken","query","setQuery","songs","setSongs","expirationTime","setExpirationTime","handleLogin","authUrl","encodeURIComponent","window","location","href","urlParams","URLSearchParams","search","code","get","fetchAccessToken","url","bodyParams","grant_type","redirect_uri","client_id","client_secret","options","method","headers","body","toString","response","fetch","ok","errorDetails","text","console","error","status","data","json","log","access_token","refresh_token","Date","now","expires_in","scheduleTokenRefresh","refreshAccessToken","payload","delayInSeconds","setTimeout","SearchSong","authorizationSearch","res","Error","tracks","items","toISOString","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","map","song","name","artists","artist","join","external_urls","spotify","rel","id","_c","$RefreshReg$"],"sources":["/Users/ashrafkhan/my-app/src/App.js"],"sourcesContent":["\n\n\nimport React, { useState, useEffect } from \"react\";\n\nconst clientId = '27e5a678ded9406f9eac4d869726a110'; // Replace with your Client ID\nconst clientSecret = 'd1a8e945d82c44df84ad6faa7a7f713b';// Replace with your Client Secret\nconst redirectUri = \"http://localhost:3000/callback\"; // Replace with your redirect URI\nconst scopes = \"user-read-private user-read-email user-library-read\";\n\nconst SpotifySongSearch = () => {\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [refreshToken, setRefreshToken] = useState('');\n  const [query, setQuery] = useState(\"taylor swift\");\n  const [songs, setSongs] = useState([]);\n  const [expirationTime, setExpirationTime] = useState(0);\n /* useEffect( ()=> {\n    const fetchAccessToken = async () => {\n      var url = 'https://accounts.spotify.com/api/token';\n      var options = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\" : \"application/x-www-form-urlencoded\",\n        }, \n        body: `grant_type=client_credentials&client_id=${clientId}&client_secret=${clientSecret}`\n      }\n      \n      try {\n        const result = await fetch(url, options);\n        const data = await result.json();\n        setAccessToken(data.access_token);\n      } catch (error) {\n        console.error('Error fetching access token:', error);\n      }\n       \n    }\n   \n      \n\n    fetchAccessToken();\n  },[]);*/\n\n\n\n  const handleLogin = () => {\n    const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n    window.location.href = authUrl;\n  };\n\n\n  useEffect(()=> {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get(\"code\");\n\n    if(code) {\n      fetchAccessToken(code);\n    }\n\n  },[]);\n\n  const fetchAccessToken = async (code) => {\n    const url = \"https://accounts.spotify.com/api/token\";\n    const bodyParams = new URLSearchParams({\n      grant_type: \"authorization_code\",\n      code: code, // Authorization code from URL\n      redirect_uri: redirectUri,\n      client_id: clientId,\n      client_secret: clientSecret,\n    });\n  \n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \n      },\n      body: bodyParams.toString(),\n    };\n  \n    try {\n      const response = await fetch(url, options);\n      if (!response.ok) {\n        const errorDetails = await response.text();\n        console.error(`Failed to fetch access token: ${response.status}`, errorDetails);\n        return;\n      }\n      const data = await response.json();\n      console.log(\"Token response data:\", data);\n      setAccessToken(data.access_token);\n      setRefreshToken(data.refresh_token);\n      setExpirationTime(Date.now() + data.expires_in *1000 );\n      scheduleTokenRefresh(data.expires_in - 60);\n    } catch (error) {\n      console.error(\"Error fetching access token:\", error);\n    }\n  };\n  \n\n  const refreshAccessToken = async () => {\n    try {\n      const url = \"https://accounts.spotify.com/api/token\";\n\n    const payload = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        grant_type: 'refresh_token',\n        refresh_token: refreshToken,\n        client_id: clientId\n      }),\n    }\n    const response = await fetch(url, payload);\n    const data = await response.json();\n      setAccessToken(data.access_token);\n      setExpirationTime(Date.now()+ data.expires_in * 1000 );\n\n      scheduleTokenRefresh(data.expires_in - 60);\n    } catch(error) {\n      console.log(error);\n    }\n  }\n\n  const scheduleTokenRefresh = (delayInSeconds) => {\n    setTimeout(() => {\n      refreshAccessToken();\n    }, delayInSeconds * 1000);\n  };\n\n  async function SearchSong() {\n    const url = `https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track&limit=10`;\n    \n  \n    const authorizationSearch = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json', // Fixed incorrect 'applications/json' to 'application/json'\n        \"Authorization\": `Bearer ${accessToken}` // Added a space after 'Bearer' and used template literals for clarity\n      }\n    };\n  \n    try {\n      const res = await fetch(url, authorizationSearch);\n  \n      if (!res.ok) {\n        throw new Error(`HTTP error! status: ${res.status}`);\n      }\n  \n      const data = await res.json(); // Awaited the response JSON parsing\n      setSongs(data.tracks.items); \n    } catch (error) {\n      console.error('Error fetching song:', error);\n    }\n\n    \n  }\n\n  console.log(\"Access Token:\", accessToken);\n  console.log(\"Refresh Token:\", refreshToken);\n  console.log(\"Token Expiration:\", new Date(expirationTime).toISOString());\n\n  return (\n    <div>\n      <button onClick={handleLogin}>Login to Spotify</button>\n      <h1>Spotify Song Search</h1>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder=\"Search for a song\"\n      />\n      <button onClick={SearchSong}>Search</button>\n\n      <ul>\n        {songs.map((song) => (\n          <li key={song.id}>\n            <p>{song.name}</p>\n            <p>Artist: {song.artists.map((artist) => artist.name).join(\", \")}</p>\n            <a href={song.external_urls.spotify} target=\"_blank\" rel=\"noopener noreferrer\">\n              Listen on Spotify\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n \n};\n\nexport default SpotifySongSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}