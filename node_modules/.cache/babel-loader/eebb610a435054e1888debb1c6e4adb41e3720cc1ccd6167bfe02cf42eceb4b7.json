{"ast":null,"code":"var _jsxFileName = \"/Users/ashrafkhan/my-app/src/App.js\";\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const clientId = '367a1dd9d8fa4e7aac443fb3cd47e9fd';\n  const clientSecret = '87d4c1ad132c440383be6992fb365c6c';\n  const redirectUri = 'http://localhost:3000/callback';\n  const scopes = 'user-read-private user-read-email';\n  const authUrl = `https://accounts.spotify.com/authorize?response_type=code&client_id=${clientId}&scope=${encodeURIComponent(scopes)}&redirect_uri=${encodeURIComponent(redirectUri)}`;\n  window.location.href = authUrl;\n  const urlParams = new URLSearchParams(window.location.search);\n  const authorizationCode = urlParams.get('code');\n  const tokenUrl = 'https://accounts.spotify.com/api/token';\n  async function getTokens(code) {\n    const body = new URLSearchParams({\n      grant_type: 'authorization_code',\n      code: code,\n      redirect_uri: 'http://localhost:3000/callback',\n      client_id: clientId,\n      client_secret: clientSecret\n    });\n    const response = await fetch(tokenUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: body.toString()\n    });\n    if (!response.ok) {\n      console.error('Error exchanging code for tokens:', response.statusText);\n      return null;\n    }\n    const data = await response.json();\n    console.log('Access Token:', data.access_token);\n    console.log('Refresh Token:', data.refresh_token);\n    return data; // Contains access_token, refresh_token, and expires_in\n  }\n  getTokens(authorizationCode);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","clientId","clientSecret","redirectUri","scopes","authUrl","encodeURIComponent","window","location","href","urlParams","URLSearchParams","search","authorizationCode","get","tokenUrl","getTokens","code","body","grant_type","redirect_uri","client_id","client_secret","response","fetch","method","headers","toString","ok","console","error","statusText","data","json","log","access_token","refresh_token","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ashrafkhan/my-app/src/App.js"],"sourcesContent":["\nimport React from 'react';\nimport { useState, useEffect } from 'react';\n\n\n\n\n function App() {\n\n\n\n const clientId = '367a1dd9d8fa4e7aac443fb3cd47e9fd';\n const clientSecret = '87d4c1ad132c440383be6992fb365c6c';\n const redirectUri = 'http://localhost:3000/callback';\n const scopes = 'user-read-private user-read-email';\n const authUrl = `https://accounts.spotify.com/authorize?response_type=code&client_id=${clientId}&scope=${encodeURIComponent(scopes)}&redirect_uri=${encodeURIComponent(redirectUri)}`;\n\nwindow.location.href = authUrl;\nconst urlParams = new URLSearchParams(window.location.search);\nconst authorizationCode = urlParams.get('code');\n\n\n\n\n\nconst tokenUrl = 'https://accounts.spotify.com/api/token';\n\nasync function getTokens(code) {\n  const body = new URLSearchParams({\n    grant_type: 'authorization_code',\n    code: code,\n    redirect_uri: 'http://localhost:3000/callback',\n    client_id: clientId,\n    client_secret: clientSecret,\n  });\n\n  const response = await fetch(tokenUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: body.toString(),\n  });\n\n  if (!response.ok) {\n    console.error('Error exchanging code for tokens:', response.statusText);\n    return null;\n  }\n\n  const data = await response.json();\n  console.log('Access Token:', data.access_token);\n  console.log('Refresh Token:', data.refresh_token);\n\n  return data; // Contains access_token, refresh_token, and expires_in\n}\ngetTokens(authorizationCode);\n\n\n\n\n\n\n\n\n\n\n  return (\n    <>\n    <div></div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAK3C,SAASC,GAAGA,CAAA,EAAG;EAIf,MAAMC,QAAQ,GAAG,kCAAkC;EACnD,MAAMC,YAAY,GAAG,kCAAkC;EACvD,MAAMC,WAAW,GAAG,gCAAgC;EACpD,MAAMC,MAAM,GAAG,mCAAmC;EAClD,MAAMC,OAAO,GAAG,uEAAuEJ,QAAQ,UAAUK,kBAAkB,CAACF,MAAM,CAAC,iBAAiBE,kBAAkB,CAACH,WAAW,CAAC,EAAE;EAEtLI,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGJ,OAAO;EAC9B,MAAMK,SAAS,GAAG,IAAIC,eAAe,CAACJ,MAAM,CAACC,QAAQ,CAACI,MAAM,CAAC;EAC7D,MAAMC,iBAAiB,GAAGH,SAAS,CAACI,GAAG,CAAC,MAAM,CAAC;EAM/C,MAAMC,QAAQ,GAAG,wCAAwC;EAEzD,eAAeC,SAASA,CAACC,IAAI,EAAE;IAC7B,MAAMC,IAAI,GAAG,IAAIP,eAAe,CAAC;MAC/BQ,UAAU,EAAE,oBAAoB;MAChCF,IAAI,EAAEA,IAAI;MACVG,YAAY,EAAE,gCAAgC;MAC9CC,SAAS,EAAEpB,QAAQ;MACnBqB,aAAa,EAAEpB;IACjB,CAAC,CAAC;IAEF,MAAMqB,QAAQ,GAAG,MAAMC,KAAK,CAACT,QAAQ,EAAE;MACrCU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDR,IAAI,EAAEA,IAAI,CAACS,QAAQ,CAAC;IACtB,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEP,QAAQ,CAACQ,UAAU,CAAC;MACvE,OAAO,IAAI;IACb;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCJ,OAAO,CAACK,GAAG,CAAC,eAAe,EAAEF,IAAI,CAACG,YAAY,CAAC;IAC/CN,OAAO,CAACK,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAACI,aAAa,CAAC;IAEjD,OAAOJ,IAAI,CAAC,CAAC;EACf;EACAhB,SAAS,CAACH,iBAAiB,CAAC;EAW1B,oBACEhB,OAAA,CAAAE,SAAA;IAAAsC,QAAA,eACAxC,OAAA;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU;EAAC,gBACT,CAAC;AAEP;AAACC,EAAA,GAhES1C,GAAG;AAkEb,eAAeA,GAAG;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}