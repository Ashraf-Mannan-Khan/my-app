{"ast":null,"code":"var _jsxFileName = \"/Users/ashrafkhan/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientId = '367a1dd9d8fa4e7aac443fb3cd47e9fd'; // Replace with your Client ID\nconst clientSecret = '87d4c1ad132c440383be6992fb365c6c'; // Replace with your Client Secret\nconst redirectUri = \"http://localhost:3000/callback\"; // Replace with your redirect URI\nconst scopes = \"user-read-private user-read-email\";\nconst SpotifySongSearch = () => {\n  _s();\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [refreshToken, setRefreshToken] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [songs, setSongs] = useState([]);\n  useEffect(() => {\n    // Extract access and refresh tokens from URL fragment\n    const hash = window.location.hash;\n    if (hash) {\n      const params = new URLSearchParams(hash.substring(1));\n      const token = params.get(\"access_token\");\n      const refresh = params.get(\"refresh_token\");\n      if (token) {\n        setAccessToken(token);\n        if (refresh) {\n          setRefreshToken(refresh);\n        }\n        window.location.hash = \"\"; // Clear hash\n      }\n    }\n  }, []);\n  const handleLogin = () => {\n    const authUrl = `https://accounts.spotify.com/authorize?response_type=code&client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n    window.location.href = authUrl;\n  };\n  const fetchAccessToken = async code => {\n    try {\n      const response = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n        },\n        body: new URLSearchParams({\n          grant_type: \"authorization_code\",\n          code: code,\n          redirect_uri: redirectUri\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setAccessToken(data.access_token);\n        setRefreshToken(data.refresh_token);\n      } else {\n        alert(\"Failed to fetch access token.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching access token:\", error);\n    }\n  };\n  const refreshAccessToken = async () => {\n    if (!refreshToken) return;\n    try {\n      const response = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`\n        },\n        body: new URLSearchParams({\n          grant_type: \"refresh_token\",\n          refresh_token: refreshToken\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setAccessToken(data.access_token);\n      } else {\n        alert(\"Failed to refresh access token.\");\n      }\n    } catch (error) {\n      console.error(\"Error refreshing access token:\", error);\n    }\n  };\n  const handleSearch = async () => {\n    if (!query) {\n      alert(\"Please enter a search term.\");\n      return;\n    }\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setSongs(data.tracks.items);\n      } else if (response.status === 401) {\n        await refreshAccessToken();\n        handleSearch();\n      } else {\n        alert(\"Failed to fetch songs. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching songs:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontFamily: \"Arial, sans-serif\",\n      margin: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spotify Song Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), !accessToken ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Log in to Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value),\n        placeholder: \"Search for a song...\",\n        style: {\n          marginRight: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: {\n          marginTop: \"20px\"\n        },\n        children: songs.map(song => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [song.name, \" by \", song.artists.map(artist => artist.name).join(\", \")]\n        }, song.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(SpotifySongSearch, \"9GucP1gh4vwy93I6zi59LQjY2rk=\");\n_c = SpotifySongSearch;\nexport default SpotifySongSearch;\nvar _c;\n$RefreshReg$(_c, \"SpotifySongSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","clientId","clientSecret","redirectUri","scopes","SpotifySongSearch","_s","accessToken","setAccessToken","refreshToken","setRefreshToken","query","setQuery","songs","setSongs","hash","window","location","params","URLSearchParams","substring","token","get","refresh","handleLogin","authUrl","encodeURIComponent","href","fetchAccessToken","code","response","fetch","method","headers","Authorization","btoa","body","grant_type","redirect_uri","ok","data","json","access_token","refresh_token","alert","error","console","refreshAccessToken","handleSearch","tracks","items","status","style","fontFamily","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","marginRight","marginTop","map","song","name","artists","artist","join","id","_c","$RefreshReg$"],"sources":["/Users/ashrafkhan/my-app/src/App.js"],"sourcesContent":["\n\n\nimport React, { useState, useEffect } from \"react\";\n\nconst clientId = '367a1dd9d8fa4e7aac443fb3cd47e9fd'; // Replace with your Client ID\nconst clientSecret = '87d4c1ad132c440383be6992fb365c6c';// Replace with your Client Secret\nconst redirectUri = \"http://localhost:3000/callback\"; // Replace with your redirect URI\nconst scopes = \"user-read-private user-read-email\";\n\nconst SpotifySongSearch = () => {\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [refreshToken, setRefreshToken] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [songs, setSongs] = useState([]);\n\n  useEffect(() => {\n    // Extract access and refresh tokens from URL fragment\n    const hash = window.location.hash;\n    if (hash) {\n      const params = new URLSearchParams(hash.substring(1));\n      const token = params.get(\"access_token\");\n      const refresh = params.get(\"refresh_token\");\n      if (token) {\n        setAccessToken(token);\n        if (refresh) {\n          setRefreshToken(refresh);\n        }\n        window.location.hash = \"\"; // Clear hash\n      }\n    }\n  }, []);\n\n  const handleLogin = () => {\n    const authUrl = `https://accounts.spotify.com/authorize?response_type=code&client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n    window.location.href = authUrl;\n  };\n\n  const fetchAccessToken = async (code) => {\n    try {\n      const response = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`,\n        },\n        body: new URLSearchParams({\n          grant_type: \"authorization_code\",\n          code: code,\n          redirect_uri: redirectUri,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setAccessToken(data.access_token);\n        setRefreshToken(data.refresh_token);\n      } else {\n        alert(\"Failed to fetch access token.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching access token:\", error);\n    }\n  };\n\n  const refreshAccessToken = async () => {\n    if (!refreshToken) return;\n\n    try {\n      const response = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          Authorization: `Basic ${btoa(`${clientId}:${clientSecret}`)}`,\n        },\n        body: new URLSearchParams({\n          grant_type: \"refresh_token\",\n          refresh_token: refreshToken,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setAccessToken(data.access_token);\n      } else {\n        alert(\"Failed to refresh access token.\");\n      }\n    } catch (error) {\n      console.error(\"Error refreshing access token:\", error);\n    }\n  };\n\n  const handleSearch = async () => {\n    if (!query) {\n      alert(\"Please enter a search term.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/search?q=${encodeURIComponent(query)}&type=track`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setSongs(data.tracks.items);\n      } else if (response.status === 401) {\n        await refreshAccessToken();\n        handleSearch();\n      } else {\n        alert(\"Failed to fetch songs. Please try again.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching songs:\", error);\n    }\n  };\n\n  return (\n    <div style={{ fontFamily: \"Arial, sans-serif\", margin: \"20px\" }}>\n      <h1>Spotify Song Search</h1>\n      {!accessToken ? (\n        <button onClick={handleLogin}>Log in to Spotify</button>\n      ) : (\n        <div>\n          <input\n            type=\"text\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            placeholder=\"Search for a song...\"\n            style={{ marginRight: \"10px\" }}\n          />\n          <button onClick={handleSearch}>Search</button>\n          <ul style={{ marginTop: \"20px\" }}>\n            {songs.map((song) => (\n              <li key={song.id}>\n                {song.name} by {song.artists.map((artist) => artist.name).join(\", \")}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpotifySongSearch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}